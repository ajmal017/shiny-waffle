from strategy.strategy import TradingStrategy
from event import events
from financial_assets.financial_assets import FinancialAsset
from random import random
from indicator.simple_moving_average import simple_moving_average
from data.time_series_data import DataSeries


class AverageCrossOver(TradingStrategy):

    """
    Sample code for a simple SMA crossover strategy.
    If the short SMA crosses above the long SMA,
    """

    def __init__(self, name, short, long):
        super().__init__(name)
        self.short = short
        self.long = long

    def generate_signal(self, asset, time_series_data):
        """

        :param asset: Asset that have generated a market signal in the event handler
        :param time_series_data: Time series data dictionary provided by data provider object
        :return: Either a SignalEventBuy or SignalEventSell based on the signal generated by the logic in this method

        For now only returning a buy signal as I have yet to implement any technical indicators
        """
        assert isinstance(time_series_data, dict)
        bars = time_series_data[asset.ticker]["bars"]
        short_current = simple_moving_average(bars, self.short)
        short_previous = simple_moving_average(bars, self.short, 1)

        long_current = simple_moving_average(bars, self.long)
        long_previous = simple_moving_average(bars, self.long, 1)

        assert isinstance(asset, FinancialAsset)
        if random() > 0.9:
            return events.SignalEventBuy(asset.ticker)
        else:
            return None

