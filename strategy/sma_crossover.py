from strategy.strategy import TradingStrategy
from common.event import events
from technical_indicators.simple_moving_average import simple_moving_average
from technical_indicators import TooSmallWindowException


class AverageCrossOver(TradingStrategy):

    """
    Sample code for a simple SMA crossover strategy.
    If the short SMA crosses above the long SMA,
    """

    def __init__(self, short, long):
        super().__init__('Simple moving average crossover')
        self.short = short
        self.long = long

    def generate_signal(self, time_series_data):

        """
        :param asset: Asset that have generated a market signal in the event handler
        :param time_series_data: Time series data dictionary provided by data provider object
        :return: Either a SignalEventBuy or SignalEventSell based on the signal generated by the logic in this method

        For now only returning a buy signal as I have yet to implement any technical indicators
        """

        bars = time_series_data["bars"]

        try:
            short_current = simple_moving_average(bars, self.short, ["close", "high", "low"], offset=0)
            short_previous = simple_moving_average(bars, self.short, ["close", "high", "low"], offset=1)

            long_current = simple_moving_average(bars, self.long, ["close", "high", "low"], offset=0)
            long_previous = simple_moving_average(bars, self.long, ["close", "high", "low"], offset=1)
            if short_current > long_current and short_previous < long_previous:
                return events.SignalEventBuy(time_series_data["asset"])
            elif short_current < long_current and short_previous > long_previous:
                return events.SignalEventSell(time_series_data["asset"])
            else:
                return None
        except TooSmallWindowException:
            return None

